{"ast":null,"code":"import * as _ from '../actions/types';\nconst initialState = {\n  cans: [],\n  can: {},\n  temps: [],\n  filter: [],\n  pagination: [],\n  pag: []\n};\n\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case _.GET_CANS:\n      return { ...state,\n        cans: payload,\n        filter: payload\n      };\n\n    case _.CAN:\n      const can = state.cans.find(can => can.id === payload);\n      return { ...state,\n        can: can\n      };\n\n    case _.TEMPS:\n      return { ...state,\n        temps: payload\n      };\n\n    case _.PAGINATION:\n      let pages = [];\n\n      for (let i = 0; i > state.cans; i += 8) {\n        let cuts = state.cans.slice(i, i + 8);\n        pages.push(cuts);\n      }\n\n      return { ...state,\n        pagination: pages\n      };\n\n    case _.PAG:\n      let pag = state.pagination[payload];\n      return { ...state,\n        pag: pag\n      };\n\n    case _.SEARCH:\n      const cans = state.cans.filter(can => {\n        if (payload === '') return can;\n        if (payload && can.name.toUpperCase().includes(payload.toUpperCase())) return can;\n      });\n      return { ...state,\n        cans: cans\n      };\n\n    case _.ORDER_ASC:\n      const order_asc = state.cans.sort((bef, aft) => {\n        if (bef.name < aft.name) return 1;\n        if (bef.name > aft.name) return -1;\n        return 0;\n      });\n      return { ...state,\n        cans: order_asc\n      };\n\n    case _.ORDER_DESC:\n      const order_desc = state.cans.sort((bef, aft) => {\n        if (bef.name > aft.name) return 1;\n        if (bef.name < aft.name) return -1;\n        return 0;\n      });\n      return { ...state,\n        cans: order_desc\n      };\n\n    case _.ORDER_FAT:\n      const order_fat = state.cans.sort((b, a) => {\n        let bPP = Math.round(b.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n        let aPP = Math.round(a.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n        return aPP - bPP;\n      });\n      return { ...state,\n        cans: order_fat\n      };\n\n    case _.ORDER_FIT:\n      const order_fit = state.cans.sort((b, a) => {\n        let bPP = Math.round(b.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n        let aPP = Math.round(a.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n        return bPP - aPP;\n      });\n      return { ...state,\n        cans: order_fit\n      };\n\n    case _.ORDER_MAX:\n      const order_max = state.cans.sort((b, a) => {\n        let bPP = Math.round(b.height.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n        let aPP = Math.round(a.height.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n        return aPP - bPP;\n      });\n      return { ...state,\n        cans: order_max\n      };\n\n    case _.ORDER_MIN:\n      const order_min = state.cans.sort((b, a) => {\n        let bPP = Math.round(b.height.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n        let aPP = Math.round(a.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n        return bPP - aPP;\n      });\n      return { ...state,\n        cans: order_min\n      };\n\n    case _.FILTER:\n      const filter = state.cans.filter(can => {\n        if (payload.toUpperCase() === 'MY_CANS' && can.id.toString().length > 3) return can;\n        if (payload.toUpperCase() === 'API_DOGS' && can.id.toString().length <= 3) return can;\n        if (can.temps && can.temps.includes(payload.toLowerCase())) return can;\n      });\n      return { ...state,\n        cans: filter\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/media/jhoanburbano/ubuntu-data/jhoanburbano/projects/react/PI-Dogs/client/src/redux/reducers/index.js"],"names":["_","initialState","cans","can","temps","filter","pagination","pag","rootReducer","state","type","payload","GET_CANS","CAN","find","id","TEMPS","PAGINATION","pages","i","cuts","slice","push","PAG","SEARCH","name","toUpperCase","includes","ORDER_ASC","order_asc","sort","bef","aft","ORDER_DESC","order_desc","ORDER_FAT","order_fat","b","a","bPP","Math","round","weight","split","reduce","parseInt","aPP","ORDER_FIT","order_fit","ORDER_MAX","order_max","height","ORDER_MIN","order_min","FILTER","toString","length","toLowerCase"],"mappings":"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","sourcesContent":["import * as _ from '../actions/types';\nconst initialState = {\n\tcans: [],\n\tcan: {},\n\ttemps: [],\n\tfilter: [],\n\tpagination: [],\n\tpag: []\n};\n\nconst rootReducer = function(state = initialState, { type, payload }) {\n\tswitch (type) {\n\t\tcase _.GET_CANS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcans: payload,\n\t\t\t\tfilter: payload\n\t\t\t};\n\t\tcase _.CAN:\n\t\t\tconst can = state.cans.find((can) => can.id === payload);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcan: can\n\t\t\t};\n\t\tcase _.TEMPS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttemps: payload\n\t\t\t};\n\t\tcase _.PAGINATION:\n\t\t\tlet pages = [];\n\t\t\tfor (let i = 0; i > state.cans; i += 8) {\n\t\t\t\tlet cuts = state.cans.slice(i, i + 8);\n\t\t\t\tpages.push(cuts);\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpagination: pages\n\t\t\t};\n\t\tcase _.PAG:\n\t\t\tlet pag = state.pagination[payload];\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tpag: pag\n\t\t\t};\n\t\tcase _.SEARCH:\n\t\t\tconst cans = state.cans.filter((can) => {\n\t\t\t\tif (payload === '') return can;\n\t\t\t\tif (payload && can.name.toUpperCase().includes(payload.toUpperCase())) return can;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcans: cans\n\t\t\t};\n\t\tcase _.ORDER_ASC:\n\t\t\tconst order_asc = state.cans.sort((bef, aft) => {\n\t\t\t\tif (bef.name < aft.name) return 1;\n\t\t\t\tif (bef.name > aft.name) return -1;\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcans: order_asc\n\t\t\t};\n\t\tcase _.ORDER_DESC:\n\t\t\tconst order_desc = state.cans.sort((bef, aft) => {\n\t\t\t\tif (bef.name > aft.name) return 1;\n\t\t\t\tif (bef.name < aft.name) return -1;\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcans: order_desc\n\t\t\t};\n\t\tcase _.ORDER_FAT:\n\t\t\tconst order_fat = state.cans.sort((b, a) => {\n\t\t\t\tlet bPP = Math.round(b.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n\t\t\t\tlet aPP = Math.round(a.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n\t\t\t\treturn aPP - bPP;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcans: order_fat\n\t\t\t};\n\t\tcase _.ORDER_FIT:\n\t\t\tconst order_fit = state.cans.sort((b, a) => {\n\t\t\t\tlet bPP = Math.round(b.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n\t\t\t\tlet aPP = Math.round(a.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n\t\t\t\treturn bPP - aPP;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcans: order_fit\n\t\t\t};\n\t\tcase _.ORDER_MAX:\n\t\t\tconst order_max = state.cans.sort((b, a) => {\n\t\t\t\tlet bPP = Math.round(b.height.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n\t\t\t\tlet aPP = Math.round(a.height.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n\t\t\t\treturn aPP - bPP;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcans: order_max\n\t\t\t};\n\t\tcase _.ORDER_MIN:\n\t\t\tconst order_min = state.cans.sort((b, a) => {\n\t\t\t\tlet bPP = Math.round(b.height.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n\t\t\t\tlet aPP = Math.round(a.weight.split(' - ').reduce((bef, aft) => (parseInt(bef) + parseInt(aft)) / 2));\n\t\t\t\treturn bPP - aPP;\n\t\t\t});\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcans: order_min\n\t\t\t};\n\t\tcase _.FILTER:\n\t\t\tconst filter = state.cans.filter(can => {\n\t\t\t\tif (payload.toUpperCase() === 'MY_CANS' && can.id.toString().length > 3)return can;\n\t\t\t\tif (payload.toUpperCase() === 'API_DOGS' && can.id.toString().length <= 3)return can;\n\t\t\t\tif (can.temps && can.temps.includes(payload.toLowerCase()))return can;\n\t\t\t})\n\t\t\treturn{\n\t\t\t\t...state,\n\t\t\t\tcans: filter\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}